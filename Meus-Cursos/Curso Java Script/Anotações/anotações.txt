


        PROMPT COMANDO DICAS
------------------------------------------

code . - abe pasta selecionada

cls - limpa chat

node main.js - executa pasta main.js


                 JAVA-SCRIPT
-----------------------------------------------







  STRICT - Modo restrito
------------------------------

"use strict" 


MODO RESTRITO, SERVE PARA 
QUE VOCÊ NÃO ERRE DIGITAÇÕES ETC...




  ENCREMENTO pre incremento e pos incremento
---------------------------------------------

++C - ANTES DE EXECUTAR C ELE INCREMENTA 1

C++ - DEPOIS DE USAR C ELE INCREMENTA 1


           VARIAVEIS
------------------------------------------



VAR -  PODE MODIFICADA DE QUALQUER ESCOPO ACIMA  E
      APRESENTADA DE QUALQUER ESCOPO ACIMA OU ABAIXO 
      E MODIFICADA.

LET -    PODE SER APRESENTADA SOMENTE DE ESCOPO ACIMA E
        PODE SER MODIFICADA

CONST -   PODE SER ACESSADA SOMENTE DE ESCOPO ACIMA E NÃO 
         PODE SER MODIFICADA



              
            OPERADORES
----------------------------------------





    OPERADORES MATEMÁTICOS
------------------------------


* -  MULTIPLICAÇÃO

/ - DIVISÃO

% - MOD (RESTO DA DIVISÃO)

** - EXPOTÊNCIAÇÃO

+ - ADIÇÃO

- - SUBTRAÇÃO



   ORDEM DE PRECENDÊNCIA
==============================

1° () - QUEM ESTÁ ENTRE PARÊNTESES

2° ** - EXPOTÊNCIAÇÃO

3° / * -  DIVISÃO E MULTIPLICAÇÃO

4° + - - SUBTRAÇÃO E ADIÇÃO




  OPERADORES RELACIONAIS
--------------------------


&& - E

|| - OU

> - MAOR 

< - MENOR QUE

>= MAIOR IGUAL A

<=  MENOR IGUAL 

!= - NOT

== - IGUAL

=== -  VALOR É IGUAL?   O TIPO É IGUAL?


ORDEM DE PRECENDENCIA
=============================

1° ! || && NOT E OU 

2° TODOS OS OUTROS DA ESQUERDA PARA DIREITA


     OPERADOR TERNÁRIO
----------------------------

? - É VERDADE ? SIM OU NÃO



NUM % 2 == 0 ? 'OPÇÃO 1':'OPÇÃO2'


QUANDO VEMOS O OPERADOR TERNÁRIO (?)
DEVEMOS NOS PERGUNTAR. É VERDADE?

  ?      OU      ?

  SIM    OU     NÃO 

  1      OR     0 

'OPÇÃO1' OU  'OPÇÃO2'






        TYPEOF()
----------------------------

TYPEOF(O QUE DESEJA SABER O TIPO ) - SREVE PARA SABER O TIPO DE ALGO 


COMO ASSIM?



TIPOS:



INTEIRO - INT


BOLEANO - BOLLEAN


LOGICO - VERDADEIRO OU FALSO


STRING - CARACTERE OU LETRA '7',@@34


 lembrando que para o typeof int e bollean são considerados
Number ( número) ou seja não são diversificados com seus identificadores





            SPREED
------------------------------


 SPREED - ESPALHAR e tranformar 
um html colection em uma array(conjunto de elementos)



  SPREED SERVE PARA ESPALHAR
OS VALORES PARA AS  VARIEVIS


EX:

VAR N = [5,4,5,2,1]


FUNTION(V1,V2){
        
      RETURN V1+V2  - NOS ESPECIFICAMOS QUE TEREMOS
        SOMENTE DOIS VALORES OU SEJA
                     

}





        THIS
--------------------------------


OPERADOR THIS FICA EM FUNÇÃO DA FUÇÃO


ELE CRIA UMA VARIAVEL COM MESMO NOME QUE A FUNÇÃO
PARA GUARDAR O VALOR DA FUNÇÃO EX:

FUNTION ALUNO(NOME,NOTA){

    THIS.NOME = NOME
    THIS.NOTA = NOTA
     
    RETURN CONSOLE.LOG(NOME),CONSOLE.LOG(NOTA)
}

ALUNO('Brunno',100)










   
                 FUNÇÕES
---------------------------------------------





    FUNÇÕES PARAMETRIZADAS
--------------------------------



 SÃO FUNÇÕES CUJO VOCÊ PASSA PARAMETROS 
PARA ELA.




EX:



FUNCTION NOME( ){ 

   FUNÇÃO NORMAL SEM PARAMETRO

}

FUNCTION NOME(NOME1, NOME2){
 
     FUNÇÃO PARAMETRIZADA RECEBANDO 2 NOMES

}




      FUNÇÕES ANONIMAS
------------------------------------



 NÃO POSSUEM NOME PORTANDO DEVEM
ESTAR RELACIONADAS A UMA VARIAVEL


EX:

FUNCTION SOMA(){ 

   - FUNÇÃO NORMAL COM NOME SOMA
}


VAR NOME = FUCNTION(){

    - FUNÇÃO ANONIMA DA VARIAVEL NOME

}


    FUNÇÕE COM RETORNO
---------------------------

SÃO FUNÇÕES QUE TEM UM RETORNO A SER CUMPRIDO 


EX:


FUNTION NOME(N1,N2){ 
  
      FUNÇÃO PARAMETRIZADA RECEBANDO 2 NOMES
    SEM NENHUMA FUNCIONALIDADE


}

FUNCTION NOME(N1,N2){
  
  RETURN CONSOLE.LOG(N1,N2)

     FUNÇÃO COM RETORNO OU SEJA QUANDO
    FOR CHAMADA SERÁ APRESENTADO NA TELA DOIS NOMES

}




CONSOLE.LOG(NOME("Brunno","Maria"))


-----CONSOLE--------

Brunno, Maria

-----------------




             REST
--------------------------------------------



  REST SERVE PARA QUE EU NÃO PRECISE 
EXPRECIFICAR A QUANTIDADE DE PARÂMETROS
QUE VEM DENTRO DA FUNÇÃO EX:





FUNCTION(N1,N2){

 -  AQUI PASSAMOS 2 PARAMETROS OU SEJA SÓ
  PODERÁ SER MANUSEADO 2 VALORES

}


     USANDO O REST
---------------------



FUNCTION(...VALORES){

  -   NOS NÃO ESPECIFICAMOS QUANTOS VALORES IRÃO VIR PARA 
    DENTRO DA VARIAVEL VALORES
    OU SEJA PODE SER 10,1000,UM QUARENTAMILVALORES


}



        FUNÇÕES GERADORAS
---------------------------------------


RECONHECIDAS POR * ASTERISCO


FUNCTION* CORES(){
      YIELD 'BLUE' RETORNO "VALOR"
      YIELD 'RED'- RETORNO "VALOR

}


CONST VARIAVEL = CORES()

CONSOE.LOG(VARIAVEL.NEXT().VALUE) ESCREVA 
  NO CONSOLE O PROXIMO VALOR DA VARIAVEL







        METODOS                   
-----------------------------------

elemnto.target - recebe o caminho do elemento




        MAP()
-------------------



MAP(PAR1,PAR2)


PAR1 - ELEMENTO

PAR2 - INDICE







 SETIMEOUT(TEMPO)
---------------------


 SERVE PARA CRIAR UM ATRAZO DE EXECUÇÃO
COM DETERMINADO TEMPO PASSADO POR
PARAMETRO




  CREATE ELEMENT
----------------------

  CREATEELEMENT(NOMEDOQUEQUERCRIAR)

 CRIA UM ELEMNTO HTML NA MEMÓRIA DO

 COMPUTADOR



  SET ATRIBUTE
----------------------

 SETATRIBUTE('ATRIBUTO','CONTEUDO')


 O ATRIBUTO SÃO OS ELEMNTOS DE

MANIPULAÇÃO.


    EX: ID,CLASS,IMG,AUDIO ETC...

JÁ O CONTEUDO É O NOME DO ATRIBUTO

EX: ID =  "NOME" CLASS = 'LISTAS'


  APPENDCHILD()
----------------------

nomeDoPai.APPENDCHILD()


 PARA ADICONAR ALGO COMO FILHO 

BASTA PASSAR O NOME DO ELEMENTO

DENTO DO PARAMETRO

ex:


var div = document.crateelement('div)

body.appendchild(div)


       REMOVE
-------------------------------

PAI.REMOVE(NOMEDOELEMENTO PARA REMOVER)

PEGUE DE ONDE ESTÁ O PAI E REMOVA
O FILHO



         FILTER  
-----------------------------------

FILTRA ELEMENTOS

NOMEDAVARIAVEL.FILTER(VALOR,INDICE,ARRAY)



valor indIce e array


idades = [3,2,3,4,6]
idades.filter(V,I,A)=>{



}






  STOP PROPAGATION
----------------------------------




 UMA DIV FUNCIONA COMO UMA BOLHA E QUANDO ADICIONAMOS 

UM EVENTO A ELA, QUERENDO OU NÃO

OS ELEMNTOS QUE ESTIVEREM DENTRO DESTA DIV RECEBERAM O EVENTAO TABEM


PARA ISSO EXISTE O stopPropagation




f.addenventlistener('click',(evento)=>{
      evento.stopPropragation


})













-----------------------------------------

 OFSETTOP - SERVE PARA PEGAR A ALTURA EM PIXELS ENTRE 

O ELEMENTO E O PAI


ONSCROLL - BARRA DE ROLAGEM LIGADA ou acionada


SCROOLY - ALTURA DA VERTICAL













FUNCIONAMENTO DO DOM
-------------------------------

element

FILHO - CHILDREN


RAIZ/ PAI - PARENT


IRMÃOS "MISTURADOS" - SIBLINGS


PRIMEIRA IRMA "MISTURADA " - NEXT SIBLINGS


ULTIMA IMRMA "MISTURADOS" - PREVIOUS SIBLINGS

PRIMIERA FILHA - FIRST CHILD


ULTIMA FILHA - LAST CHILD

 

                 PARENT

  CHILDREN    FIRST CHILDREN    PREVIOUS CHILDREN - DENTRO DO PAI

  SIBLINGS       FIRST SIBILINGS    PREVIOUS SINBLINGS - DENTRO DO PAI AO LADO DO CHILDEN

   
 


  REMOVE
----------------------


REMOVE()




  ADICIONANDO ELEMNTOS ANTES E DEPOIS DE ALGO
------------------------------------------------


PARA INSERIRMOS ALGO ANTES DE UM ELEMENTO USAMOS
O METODO INSERTBEFORE()

O METODO INSERT RECEBE DOIS PARAMETROS

QUEM DEPOIIS DE QUEM

OU SEJA

ADICONAR QUEM? DEPOIS DE QUEM?

CONTAINER.INSERTBEFORE(ELEMENTO,DEPOISdeELEMENTO)


E SEU QUISER ADICIONAR DEPOIS?


USE A ARVORE GENEOLOGICA.

